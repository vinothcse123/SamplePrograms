#include"SocketConnection.h"

/* HEADER FILE */

#ifndef _SOCKET_CONNECTION_H_
#define _SOCKET_CONNECTION_H_

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <netdb.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <cstdio>
#include "Enums.h"

#define MAXDATASIZE 100 // max number of bytes we can get at once

class SocketConnection
{
   private:

      char m_Server_IP_[MAX_IP_ADDRESS_LEN];
      int m_fd;
      int m_port;


   public:

      SocketConnection();
      ~SocketConnection();
      bool getSocketConnection();
      bool sendToServer(CreditControlRequest *);

};

#endif 


SocketConnection :: SocketConnection()
{
   m_fd = 0;
   strcpy(m_Server_IP_,"192.168.151.71");
   m_port = 6661;   

   getSocketConnection();
   printf("\n FD ALLOCATED %d ", m_fd); 
}


SocketConnection :: ~SocketConnection()
{
   close(m_fd);
}

bool SocketConnection ::  getSocketConnection()
{
   struct hostent *he;
   struct sockaddr_in their_addr; 


   if ((he=gethostbyname(m_Server_IP_)) == NULL) 
   { 
      perror("gethostbyname");
      exit(1);
   }
   if ((m_fd = socket(AF_INET, SOCK_STREAM, 0)) == -1) 
   {
      perror("socket");
      exit(1);
   }

   their_addr.sin_family = AF_INET; 
   their_addr.sin_port = htons(m_port); // short, network byte order
   their_addr.sin_addr = *((struct in_addr *)he->h_addr);
   memset(&(their_addr.sin_zero),'\0', 8); // zero the rest of the struct
   if (connect(m_fd, (struct sockaddr *)&their_addr,  sizeof(struct sockaddr)) == -1) 
   {
      perror("connect");
      exit(1);
   }


	return true;
}


bool SocketConnection :: sendToServer(CreditControlRequest *p_CCReq)
{
   send(m_fd,&p_CCReq,sizeof(p_CCReq),0);
   return true;
}
